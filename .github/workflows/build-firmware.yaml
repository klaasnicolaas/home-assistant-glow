---
# Build the ESPHome firmwares for the Home Assistant Glow project.
name: Build & Deploy firmware

on:
  push:
    branches:
      - develop
      - main
  release:
    types:
      - published
  workflow_dispatch:
  pull_request:
    branches-ignore:
      - renovate/docusaurus**
  # Every Monday at 4:00 UTC
  schedule:
    - cron: "0 4 * * 1"

concurrency:
  # yamllint disable-line rule:line-length
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  RELEASE_URL: ${{ github.server_url }}/${{ github.repository }}/releases/latest
  FIRMWARES: |
    home-assistant-glow

jobs:
  prepare:
    name: Prepare matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.prepare-matrix.outputs.matrix }}
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v4.1.7
      - name: ⤵️ Get changed files
        if: github.event_name == 'pull_request'
        id: changes
        uses: masesgroup/retrieve-changed-files@v3
      - name: 🚧 Prepare matrix
        id: prepare-matrix
        run: |-
          # Set variables
          matrix=""
          fullRun=$(! [[ "${{ github.event_name }}" != "pull_request" || "${{ steps.changes.outputs.modified }}" == *".github/workflows/build-firmware.yaml"* ]]; echo $?)

          # Iterate through firmwares and devices
          for firmware in $FIRMWARES; do
            for device in $firmware/*.yaml; do
              # If pull_request event type and changed files do not contain the device, skip it
              if [[ $fullRun -eq 0 && "${{ steps.changes.outputs.added_modified }}" != *"${device}"* ]]; then
                continue
              fi

              # Extract device name from file path
              device=${device##*/}
              device=${device%.yaml}

              # Set default version
              version="latest"

              # Build matrix entry
              matrix="$matrix{\"firmware\":\"$firmware\",\"device\":\"$device\", \"version\":\"$version\"},"
            done
          done

          # Remove trailing comma and format matrix
          matrix=${matrix%?}
          matrix="{\"include\":[$matrix]}"

          # Output matrix to a file
          echo matrix=$matrix >> $GITHUB_OUTPUT
      - name: 🧪 Display generated matrix
        run: |
          echo "${{ steps.prepare-matrix.outputs.matrix }}"

  build:
    name: ${{ matrix.firmware }} / ${{ matrix.device }}
    if: ${{ needs.prepare.outputs.matrix != '{"include":[]}' }}
    runs-on: ubuntu-latest
    needs: prepare
    strategy:
      max-parallel: 5
      fail-fast: false
      matrix: ${{fromJson(needs.prepare.outputs.matrix)}}
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v4.1.7
      - name: Determine ref
        id: determine_ref
        run: |
          if [[ "${{ github.ref }}" != "refs/heads/main" ]]; then
            sed -i "s/ref: .*/ref: ${{ github.head_ref }}/g" ${{ matrix.firmware }}/${{ matrix.device }}.yaml
          else
            echo "Skipping sed command because the branch is main."
          fi
      - name: Log Changed YAML file
        run: cat ${{ matrix.firmware }}/${{ matrix.device }}.yaml
      - name: 🔨 Build firmware
        uses: esphome/build-action@v3.1.0
        id: esphome-build
        with:
          yaml_file: ${{ matrix.firmware }}/${{ matrix.device }}.yaml
          version: ${{ matrix.version || 'latest' }}
          release_url: ${{ github.event.release.html_url || env.RELEASE_URL }}
          cache: true
      - name: 🚚 Move generated files to output
        run: |
          mkdir -p output/${{ matrix.device }}
          mv ${{ steps.esphome-build.outputs.name }}/* output/${{ matrix.device }}/
          echo ${{ steps.esphome-build.outputs.version }} > output/${{ matrix.device }}/version
      - name: 🔨 Alter path in manifest.json
        run: |
          sed -i 's/${{ steps.esphome-build.outputs.name }}\//\/${{ matrix.firmware }}\/${{ matrix.device }}\//g' output/${{ matrix.device }}/manifest.json
      - name: ⬆️ Upload firmware / device artifact
        uses: actions/upload-artifact@v4.3.3
        with:
          name: build-${{ matrix.firmware}}-${{ matrix.device }}
          path: output
          retention-days: 1

  combined-manifests:
    name: Combine ${{ matrix.project }} manifests
    runs-on: ubuntu-latest
    needs: build
    strategy:
      fail-fast: false
      matrix:
        include:
          - project: home-assistant-glow
            name: Home Assistant Glow
    steps:
      - name: ⤵️ Download specific artifacts
        uses: actions/download-artifact@v4.1.7
        with:
          pattern: build-${{ matrix.project }}-*
          merge-multiple: true
          path: files
      - name: 🔨 Generate device manifest.json
        run: |
          version=$(cat files/*/version | sort -V | tail -n 1)
          jq -s --arg version "$version" '{"name": "${{ matrix.name }}", "version": $version, "home_assistant_domain": "esphome", "builds":.}' files/*/manifest.json > files/manifest.json
      - name: 🧪 Display structure of job
        run: ls -R
      - name: ⬆️ Upload project artifact
        uses: actions/upload-artifact@v4.3.3
        with:
          name: ${{ matrix.project }}
          path: files
          retention-days: 1

  build-docs:
    name: Build documentation
    if: contains(fromJSON('["workflow_dispatch", "release"]'), github.event_name) && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: combined-manifests
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v4.1.7
      - name: ⬇️ Download all artifacts
        uses: actions/download-artifact@v4.1.7
        with:
          pattern: "!build-*"
          path: output
      - name: 🗂️ Move firmware folders to static
        run: mv output/* docs/static
      - name: 🧪 Display structure of job
        run: ls -R

      - name: 🏗️ Set up Node.js
        uses: actions/setup-node@v4.0.2
        with:
          node-version: 20.x
      - name: 🏗️ Install Docusaurus dependencies
        run: npm install --frozen-lockfile --non-interactive
        working-directory: docs
      - name: 🚀 Build Docusaurus
        run: npm run build
        working-directory: docs
      - name: ⬆️ Upload pages artifacts
        uses: actions/upload-pages-artifact@v3.0.1
        with:
          path: docs/build

  deploy:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: build-docs
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: 🏗️ Setup Github Pages
        uses: actions/configure-pages@v5.0.0
      - name: 🚀 Deploy to Github Pages
        uses: actions/deploy-pages@v4.0.5
        id: deployment
